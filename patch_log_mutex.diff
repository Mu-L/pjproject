diff --git a/pjlib/src/pj/os_core_unix.c b/pjlib/src/pj/os_core_unix.c
index c9a7b6fc1..1f6915fa1 100644
--- a/pjlib/src/pj/os_core_unix.c
+++ b/pjlib/src/pj/os_core_unix.c
@@ -543,13 +543,13 @@ static void *thread_main(void *param)
 	pj_mutex_unlock(rec->suspended_mutex);
     }
 
-    PJ_LOG(6,(rec->obj_name, "Thread started"));
+    PJ_LOG(5,(rec->obj_name, "Thread started"));
 
     /* Call user's entry! */
     result = (void*)(long)(*rec->proc)(rec->arg);
 
     /* Done. */
-    PJ_LOG(6,(rec->obj_name, "Thread quitting"));
+    PJ_LOG(5,(rec->obj_name, "Thread quitting"));
 
     return result;
 }
@@ -646,7 +646,7 @@ PJ_DEF(pj_status_t) pj_thread_create( pj_pool_t *pool,
 
     *ptr_thread = rec;
 
-    PJ_LOG(6, (rec->obj_name, "Thread created"));
+    PJ_LOG(5, (rec->obj_name, "Thread created"));
     return PJ_SUCCESS;
 #else
     pj_assert(!"Threading is disabled!");
@@ -728,7 +728,7 @@ PJ_DEF(pj_status_t) pj_thread_join(pj_thread_t *p)
     if (p == pj_thread_this())
 	return PJ_ECANCELLED;
 
-    PJ_LOG(6, (pj_thread_this()->obj_name, "Joining thread %s", p->obj_name));
+    PJ_LOG(5, (pj_thread_this()->obj_name, "Joining thread %s", p->obj_name));
     result = pthread_join( rec->thread, &ret);
 
     if (result == 0)
@@ -1211,7 +1211,7 @@ static pj_status_t init_mutex(pj_mutex_t *mutex, const char *name, int type)
 	mutex->obj_name[PJ_MAX_OBJ_NAME-1] = '\0';
     }
 
-    PJ_LOG(6, (mutex->obj_name, "Mutex created"));
+    PJ_LOG(5, (mutex->obj_name, "Mutex created"));
     return PJ_SUCCESS;
 #else /* PJ_HAS_THREADS */
     return PJ_SUCCESS;
@@ -1278,11 +1278,11 @@ PJ_DEF(pj_status_t) pj_mutex_lock(pj_mutex_t *mutex)
     PJ_ASSERT_RETURN(mutex, PJ_EINVAL);
 
 #if PJ_DEBUG
-    PJ_LOG(6,(mutex->obj_name, "Mutex: thread %s is waiting (mutex owner=%s)",
+    PJ_LOG(5,(mutex->obj_name, "Mutex: thread %s is waiting (mutex owner=%s)",
 				pj_thread_this()->obj_name,
 				mutex->owner_name));
 #else
-    PJ_LOG(6,(mutex->obj_name, "Mutex: thread %s is waiting",
+    PJ_LOG(5,(mutex->obj_name, "Mutex: thread %s is waiting",
 				pj_thread_this()->obj_name));
 #endif
 
@@ -1296,14 +1296,14 @@ PJ_DEF(pj_status_t) pj_mutex_lock(pj_mutex_t *mutex)
 	++mutex->nesting_level;
     }
 
-    PJ_LOG(6,(mutex->obj_name,
+    PJ_LOG(5,(mutex->obj_name,
 	      (status==0 ?
 		"Mutex acquired by thread %s (level=%d)" :
 		"Mutex acquisition FAILED by %s (level=%d)"),
 	      pj_thread_this()->obj_name,
 	      mutex->nesting_level));
 #else
-    PJ_LOG(6,(mutex->obj_name,
+    PJ_LOG(5,(mutex->obj_name,
 	      (status==0 ? "Mutex acquired by thread %s" : "FAILED by %s"),
 	      pj_thread_this()->obj_name));
 #endif
@@ -1336,11 +1336,11 @@ PJ_DEF(pj_status_t) pj_mutex_unlock(pj_mutex_t *mutex)
 	mutex->owner_name[0] = '\0';
     }
 
-    PJ_LOG(6,(mutex->obj_name, "Mutex released by thread %s (level=%d)",
+    PJ_LOG(5,(mutex->obj_name, "Mutex released by thread %s (level=%d)",
 				pj_thread_this()->obj_name,
 				mutex->nesting_level));
 #else
-    PJ_LOG(6,(mutex->obj_name, "Mutex released by thread %s",
+    PJ_LOG(5,(mutex->obj_name, "Mutex released by thread %s",
 				pj_thread_this()->obj_name));
 #endif
 
@@ -1367,7 +1367,7 @@ PJ_DEF(pj_status_t) pj_mutex_trylock(pj_mutex_t *mutex)
     PJ_CHECK_STACK();
     PJ_ASSERT_RETURN(mutex, PJ_EINVAL);
 
-    PJ_LOG(6,(mutex->obj_name, "Mutex: thread %s is trying",
+    PJ_LOG(5,(mutex->obj_name, "Mutex: thread %s is trying",
 				pj_thread_this()->obj_name));
 
     status = pthread_mutex_trylock( &mutex->mutex );
@@ -1378,15 +1378,15 @@ PJ_DEF(pj_status_t) pj_mutex_trylock(pj_mutex_t *mutex)
 	pj_ansi_strcpy(mutex->owner_name, mutex->owner->obj_name);
 	++mutex->nesting_level;
 
-	PJ_LOG(6,(mutex->obj_name, "Mutex acquired by thread %s (level=%d)",
+	PJ_LOG(5,(mutex->obj_name, "Mutex acquired by thread %s (level=%d)",
 				   pj_thread_this()->obj_name,
 				   mutex->nesting_level));
 #else
-	PJ_LOG(6,(mutex->obj_name, "Mutex acquired by thread %s",
+	PJ_LOG(5,(mutex->obj_name, "Mutex acquired by thread %s",
 				  pj_thread_this()->obj_name));
 #endif
     } else {
-	PJ_LOG(6,(mutex->obj_name, "Mutex: thread %s's trylock() failed",
+	PJ_LOG(5,(mutex->obj_name, "Mutex: thread %s's trylock() failed",
 				    pj_thread_this()->obj_name));
     }
 
@@ -1413,7 +1413,7 @@ PJ_DEF(pj_status_t) pj_mutex_destroy(pj_mutex_t *mutex)
     PJ_ASSERT_RETURN(mutex, PJ_EINVAL);
 
 #if PJ_HAS_THREADS
-    PJ_LOG(6,(mutex->obj_name, "Mutex destroyed by thread %s",
+    PJ_LOG(5,(mutex->obj_name, "Mutex destroyed by thread %s",
 			       pj_thread_this()->obj_name));
 
     for (retry=0; retry<RETRY; ++retry) {
@@ -1630,7 +1630,7 @@ PJ_DEF(pj_status_t) pj_sem_create( pj_pool_t *pool,
 	sem->obj_name[PJ_MAX_OBJ_NAME-1] = '\0';
     }
 
-    PJ_LOG(6, (sem->obj_name, "Semaphore created"));
+    PJ_LOG(5, (sem->obj_name, "Semaphore created"));
 
     *ptr_sem = sem;
     return PJ_SUCCESS;
@@ -1651,7 +1651,7 @@ PJ_DEF(pj_status_t) pj_sem_wait(pj_sem_t *sem)
     PJ_CHECK_STACK();
     PJ_ASSERT_RETURN(sem, PJ_EINVAL);
 
-    PJ_LOG(6, (sem->obj_name, "Semaphore: thread %s is waiting",
+    PJ_LOG(5, (sem->obj_name, "Semaphore: thread %s is waiting",
 			      pj_thread_this()->obj_name));
 
 #if defined(PJ_SEMAPHORE_USE_DISPATCH_SEM) && PJ_SEMAPHORE_USE_DISPATCH_SEM != 0
@@ -1661,10 +1661,10 @@ PJ_DEF(pj_status_t) pj_sem_wait(pj_sem_t *sem)
 #endif
 
     if (result == 0) {
-	PJ_LOG(6, (sem->obj_name, "Semaphore acquired by thread %s",
+	PJ_LOG(5, (sem->obj_name, "Semaphore acquired by thread %s",
 				  pj_thread_this()->obj_name));
     } else {
-	PJ_LOG(6, (sem->obj_name, "Semaphore: thread %s FAILED to acquire",
+	PJ_LOG(5, (sem->obj_name, "Semaphore: thread %s FAILED to acquire",
 				  pj_thread_this()->obj_name));
     }
 
@@ -1696,7 +1696,7 @@ PJ_DEF(pj_status_t) pj_sem_trywait(pj_sem_t *sem)
 #endif
 
     if (result == 0) {
-	PJ_LOG(6, (sem->obj_name, "Semaphore acquired by thread %s",
+	PJ_LOG(5, (sem->obj_name, "Semaphore acquired by thread %s",
 				  pj_thread_this()->obj_name));
     }
     if (result == 0)
@@ -1716,7 +1716,7 @@ PJ_DEF(pj_status_t) pj_sem_post(pj_sem_t *sem)
 {
 #if PJ_HAS_THREADS
     int result;
-    PJ_LOG(6, (sem->obj_name, "Semaphore released by thread %s",
+    PJ_LOG(5, (sem->obj_name, "Semaphore released by thread %s",
 			      pj_thread_this()->obj_name));
 #if defined(PJ_SEMAPHORE_USE_DISPATCH_SEM) && PJ_SEMAPHORE_USE_DISPATCH_SEM != 0
     dispatch_semaphore_signal(sem->sem);
@@ -1746,7 +1746,7 @@ PJ_DEF(pj_status_t) pj_sem_destroy(pj_sem_t *sem)
     PJ_CHECK_STACK();
     PJ_ASSERT_RETURN(sem, PJ_EINVAL);
 
-    PJ_LOG(6, (sem->obj_name, "Semaphore destroyed by thread %s",
+    PJ_LOG(5, (sem->obj_name, "Semaphore destroyed by thread %s",
 			      pj_thread_this()->obj_name));
 #if defined(PJ_DARWINOS) && PJ_DARWINOS!=0
 #   if defined(PJ_SEMAPHORE_USE_DISPATCH_SEM) && PJ_SEMAPHORE_USE_DISPATCH_SEM != 0
