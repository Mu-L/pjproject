diff --git a/pjmedia/include/pjmedia/config.h b/pjmedia/include/pjmedia/config.h
index 8b1fc28a1..fafd08c33 100644
--- a/pjmedia/include/pjmedia/config.h
+++ b/pjmedia/include/pjmedia/config.h
@@ -1591,6 +1591,29 @@
 #endif
 
 
+/**
+ * Specify the number of keep-alive needed to be sent after the stream is
+ * created.
+ *
+ * Setting this to 0 will disable it.
+ *
+ * Default : 0
+ */
+#ifndef PJMEDIA_STREAM_START_KA_CNT
+#   define PJMEDIA_STREAM_START_KA_CNT	0
+#endif
+
+
+/**
+ * Specify the interval to send keep-alive after the stream is created,
+ * in msec.
+ *
+ * Default : 1000
+ */
+#ifndef PJMEDIA_STREAM_START_KA_NTERVAL_MSEC
+#   define PJMEDIA_STREAM_START_KA_NTERVAL_MSEC  1000
+#endif
+
 
 /**
  * @}
diff --git a/pjmedia/include/pjmedia/stream.h b/pjmedia/include/pjmedia/stream.h
index 02b36772d..ad04c336f 100644
--- a/pjmedia/include/pjmedia/stream.h
+++ b/pjmedia/include/pjmedia/stream.h
@@ -85,7 +85,7 @@ PJ_BEGIN_DECL
  */
 typedef struct pjmedia_channel pjmedia_channel;
 
-/** 
+/**
  * This structure describes media stream information. Each media stream
  * corresponds to one "m=" line in SDP session descriptor, and it has
  * its own RTP/RTCP socket pair.
@@ -143,6 +143,8 @@ typedef struct pjmedia_stream_info
     pj_bool_t		use_ka;	    /**< Stream keep-alive and NAT hole punch
 					 (see #PJMEDIA_STREAM_ENABLE_KA)
 					 is enabled?			    */
+    pjmedia_stream_ka_config ka_cfg;
+                                    /**< Stream send kep-alive settings.    */
 #endif
     pj_bool_t           rtcp_sdes_bye_disabled; 
                                     /**< Disable automatic sending of RTCP
diff --git a/pjmedia/include/pjmedia/stream_common.h b/pjmedia/include/pjmedia/stream_common.h
index 10ddefdad..e585dc325 100644
--- a/pjmedia/include/pjmedia/stream_common.h
+++ b/pjmedia/include/pjmedia/stream_common.h
@@ -55,7 +55,39 @@ typedef struct pjmedia_stream_rtp_sess_info
 
 } pjmedia_stream_rtp_sess_info;
 
+#if defined(PJMEDIA_STREAM_ENABLE_KA) && PJMEDIA_STREAM_ENABLE_KA!=0
 
+/**
+ * Structure of configuration settings for stream keepalive after it
+ * is created.
+ */
+typedef struct pjmedia_stream_ka_config
+{
+    /**
+     * The number of keepalive to be sent after the stream is created.
+     *
+     * Default: PJMEDIA_STREAM_START_KA_CNT
+     */
+    unsigned			    start_count;
+
+    /**
+     * The keepalive sending interval after the stream is created.
+     *
+     * Default: PJMEDIA_STREAM_START_KA_NTERVAL_MSEC
+     */
+    unsigned			    start_interval;
+
+} pjmedia_stream_ka_config;
+
+#endif
+
+/**
+ * Initialize the stream send keep-alive with default settings.
+ *
+ * @param cfg		Stream send keep-alive structure to be initialized.
+ */
+PJ_DECL(void)
+pjmedia_stream_ka_config_default(pjmedia_stream_ka_config *cfg);
 
 /**
  * This is internal function for parsing SDP format parameter of specific
diff --git a/pjmedia/include/pjmedia/vid_stream.h b/pjmedia/include/pjmedia/vid_stream.h
index c814f55bf..c96529621 100644
--- a/pjmedia/include/pjmedia/vid_stream.h
+++ b/pjmedia/include/pjmedia/vid_stream.h
@@ -185,6 +185,8 @@ typedef struct pjmedia_vid_stream_info
     pj_bool_t		use_ka;	    /**< Stream keep-alive and NAT hole punch
 					 (see #PJMEDIA_STREAM_ENABLE_KA)
 					 is enabled?			    */
+    pjmedia_stream_ka_config ka_cfg;
+                                    /**< Stream send kep-alive settings.    */
 #endif
 
     pjmedia_vid_codec_info   codec_info;  /**< Incoming codec format info.  */
diff --git a/pjmedia/src/pjmedia/stream.c b/pjmedia/src/pjmedia/stream.c
index 2cbc55543..5db1dac9a 100644
--- a/pjmedia/src/pjmedia/stream.c
+++ b/pjmedia/src/pjmedia/stream.c
@@ -238,6 +238,12 @@ struct pjmedia_stream
 						    enabled?		    */
     pj_timestamp	     last_frm_ts_sent; /**< Timestamp of last sending
 					            packet		    */
+    unsigned	             start_ka_count;   /**< The number of keep-alive
+                                                    to be sent after it is
+                                                    created                 */
+    unsigned	             start_ka_interval;/**< The keepalive sending
+                                                    interval after the stream
+                                                    is created              */
 #endif
 
     pj_sockaddr		     rem_rtp_addr;     /**< Remote RTP address	    */
@@ -1327,13 +1333,22 @@ static pj_status_t put_frame_imp( pjmedia_port *port,
 	pj_uint32_t dtx_duration;
 
 	dtx_duration = pj_timestamp_diff32(&stream->last_frm_ts_sent,
-					   &frame->timestamp);
-	if (dtx_duration >
-	    PJMEDIA_STREAM_KA_INTERVAL * PJMEDIA_PIA_SRATE(&stream->port.info))
-	{
-	    send_keep_alive_packet(stream);
-	    stream->last_frm_ts_sent = frame->timestamp;
-	}
+					    &frame->timestamp);
+        if (stream->start_ka_count) {
+	    if ((dtx_duration > stream->start_ka_interval))
+	    {
+	        send_keep_alive_packet(stream);
+	        stream->last_frm_ts_sent = frame->timestamp;
+                stream->start_ka_count--;
+	    }
+        } else {
+	    if ((dtx_duration > PJMEDIA_STREAM_KA_INTERVAL *
+                 PJMEDIA_PIA_SRATE(&stream->port.info)))
+	    {
+	        send_keep_alive_packet(stream);
+	        stream->last_frm_ts_sent = frame->timestamp;
+	    }
+        }
     }
 #endif
 
@@ -2433,6 +2448,8 @@ PJ_DEF(pj_status_t) pjmedia_stream_create( pjmedia_endpt *endpt,
 
 #if defined(PJMEDIA_STREAM_ENABLE_KA) && PJMEDIA_STREAM_ENABLE_KA!=0
     stream->use_ka = info->use_ka;
+    stream->start_ka_count = info->ka_cfg.start_count;
+    stream->start_ka_interval = info->ka_cfg.start_interval;
 #endif
 
     stream->cname = info->cname;
diff --git a/pjmedia/src/pjmedia/stream_common.c b/pjmedia/src/pjmedia/stream_common.c
index 9970cc78f..9fb91a61e 100644
--- a/pjmedia/src/pjmedia/stream_common.c
+++ b/pjmedia/src/pjmedia/stream_common.c
@@ -21,6 +21,14 @@
 
 #define THIS_FILE	"stream_common.c"
 
+PJ_DEF(void)
+pjmedia_stream_ka_config_default(pjmedia_stream_ka_config *cfg)
+{
+    pj_bzero(cfg, sizeof(*cfg));
+    cfg->start_count = PJMEDIA_STREAM_START_KA_CNT;
+    cfg->start_interval = PJMEDIA_STREAM_START_KA_NTERVAL_MSEC;
+}
+
 /*
  * Parse fmtp for specified format/payload type.
  */
diff --git a/pjmedia/src/pjmedia/vid_stream.c b/pjmedia/src/pjmedia/vid_stream.c
index b6e16b2cb..28a314538 100644
--- a/pjmedia/src/pjmedia/vid_stream.c
+++ b/pjmedia/src/pjmedia/vid_stream.c
@@ -164,6 +164,12 @@ struct pjmedia_vid_stream
 						    enabled?		    */
     pj_timestamp	     last_frm_ts_sent; /**< Timestamp of last sending
 					            packet		    */
+    unsigned	             start_ka_count;   /**< The number of keep-alive
+                                                    to be sent after it is
+                                                    created                 */
+    unsigned	             start_ka_interval;/**< The keepalive sending
+                                                    interval after the stream
+                                                    is created              */
 #endif
 
 #if TRACE_JB
@@ -1057,8 +1063,15 @@ static pj_status_t put_frame(pjmedia_port *port,
 	dtx_duration = pj_timestamp_diff32(&stream->last_frm_ts_sent,
 					   &frame->timestamp);
 
-        if (dtx_duration >
-	    PJMEDIA_STREAM_KA_INTERVAL * stream->info.codec_info.clock_rate)
+        if (stream->start_ka_count) {
+	    if ((dtx_duration > stream->start_ka_interval))
+	    {
+	        send_keep_alive_packet(stream);
+	        stream->last_frm_ts_sent = frame->timestamp;
+                stream->start_ka_count--;
+	    }
+        } else if ((dtx_duration >
+	    PJMEDIA_STREAM_KA_INTERVAL * stream->info.codec_info.clock_rate))
 	{
 	    send_keep_alive_packet(stream);
 	    stream->last_frm_ts_sent = frame->timestamp;
@@ -1765,6 +1778,8 @@ PJ_DEF(pj_status_t) pjmedia_vid_stream_create(
 
 #if defined(PJMEDIA_STREAM_ENABLE_KA) && PJMEDIA_STREAM_ENABLE_KA!=0
     stream->use_ka = info->use_ka;
+    stream->start_ka_count = info->ka_cfg.start_count;
+    stream->start_ka_interval = info->ka_cfg.start_interval;
 #endif
     stream->num_keyframe = info->sk_cfg.count;
 
diff --git a/pjsip/src/pjsua-lib/pjsua_aud.c b/pjsip/src/pjsua-lib/pjsua_aud.c
index fd2f379ea..82a042e5a 100644
--- a/pjsip/src/pjsua-lib/pjsua_aud.c
+++ b/pjsip/src/pjsua-lib/pjsua_aud.c
@@ -663,6 +663,8 @@ pj_status_t pjsua_aud_channel_update(pjsua_call_media *call_med,
 #if defined(PJMEDIA_STREAM_ENABLE_KA) && PJMEDIA_STREAM_ENABLE_KA!=0
 	/* Enable/disable stream keep-alive and NAT hole punch. */
 	si->use_ka = pjsua_var.acc[call->acc_id].cfg.use_stream_ka;
+
+        si->ka_cfg = pjsua_var.acc[call->acc_id].cfg.stream_ka_cfg;
 #endif
 
 	/* Create session based on session info. */
diff --git a/pjsip/src/pjsua-lib/pjsua_core.c b/pjsip/src/pjsua-lib/pjsua_core.c
index 5e3f240bf..6444f78f4 100644
--- a/pjsip/src/pjsua-lib/pjsua_core.c
+++ b/pjsip/src/pjsua-lib/pjsua_core.c
@@ -365,6 +365,7 @@ PJ_DEF(void) pjsua_acc_config_default(pjsua_acc_config *cfg)
 			 PJSUA_REG_USE_ACC_PROXY;
 #if defined(PJMEDIA_STREAM_ENABLE_KA) && PJMEDIA_STREAM_ENABLE_KA!=0
     cfg->use_stream_ka = (PJMEDIA_STREAM_ENABLE_KA != 0);
+    pjmedia_stream_ka_config_default(&cfg->stream_ka_cfg);
 #endif
     pj_list_init(&cfg->reg_hdr_list);
     pj_list_init(&cfg->sub_hdr_list);
diff --git a/pjsip/src/pjsua-lib/pjsua_vid.c b/pjsip/src/pjsua-lib/pjsua_vid.c
index b3e3862e6..8c0d6263c 100644
--- a/pjsip/src/pjsua-lib/pjsua_vid.c
+++ b/pjsip/src/pjsua-lib/pjsua_vid.c
@@ -1064,7 +1064,9 @@ pj_status_t pjsua_vid_channel_update(pjsua_call_media *call_med,
 
 #if defined(PJMEDIA_STREAM_ENABLE_KA) && PJMEDIA_STREAM_ENABLE_KA!=0
 	/* Enable/disable stream keep-alive and NAT hole punch. */
-	si->use_ka = pjsua_var.acc[call->acc_id].cfg.use_stream_ka;
+	si->use_ka = acc->cfg.use_stream_ka;
+
+        si->ka_cfg = acc->cfg.stream_ka_cfg;
 #endif
 
 	/* Try to get shared format ID between the capture device and 
